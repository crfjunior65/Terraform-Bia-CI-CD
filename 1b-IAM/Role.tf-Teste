# Variáveis para customização
variable "environment" {
  description = "Nome do ambiente (dev, staging, prod)"
  type        = string
  default     = "bia"
}

variable "create_s3_role" {
  description = "Controla se a role para S3 deve ser criada"
  type        = bool
  default     = true
}

# 1. Role IAM para EC2 com permissões SSM + ECS + ECR
resource "aws_iam_role" "ec2_ssm_role" {
  name = "ec2-ssm-role-${var.environment}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Principal = {
        Service = "ec2.amazonaws.com"
      },
      Action = "sts:AssumeRole"
    }]
  })

  tags = {
    Environment = var.environment
    ManagedBy   = "Terraform"
  }
}

# Anexar políticas à role SSM
resource "aws_iam_role_policy_attachment" "ssm_managed_policy" {
  role       = aws_iam_role.ec2_ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_role_policy_attachment" "ecs_full_access" {
  role       = aws_iam_role.ec2_ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
}

resource "aws_iam_role_policy_attachment" "ecr_full_access" {
  role       = aws_iam_role.ec2_ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
}

# Instance Profile para a role SSM
resource "aws_iam_instance_profile" "ssm_profile" {
  name = "ec2-ssm-profile-${var.environment}"
  role = aws_iam_role.ec2_ssm_role.name
}

# 2. Role IAM para EC2 com permissões S3/SSM (condicional)
resource "aws_iam_role" "ec2_s3_role" {
  count = var.create_s3_role ? 1 : 0
  name  = "ec2-s3-role-${var.environment}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Principal = {
        Service = "ec2.amazonaws.com"
      },
      Action = "sts:AssumeRole"
    }]
  })

  tags = {
    Environment = var.environment
    ManagedBy   = "Terraform"
  }
}

# Anexar políticas à role S3
resource "aws_iam_role_policy_attachment" "s3_ssm_policy" {
  count      = var.create_s3_role ? 1 : 0
  role       = aws_iam_role.ec2_s3_role[0].name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_role_policy_attachment" "s3_full_access" {
  count      = var.create_s3_role ? 1 : 0
  role       = aws_iam_role.ec2_s3_role[0].name
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}

# Instance Profile para a role S3
resource "aws_iam_instance_profile" "s3_profile" {
  count = var.create_s3_role ? 1 : 0
  name  = "ec2-s3-profile-${var.environment}"
  role  = aws_iam_role.ec2_s3_role[0].name
}

# 3. Role IAM para ECS
resource "aws_iam_role" "ecs_instance_role" {
  name = "ecs-instance-role-${var.environment}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Principal = {
        Service = "ec2.amazonaws.com"
      },
      Action = "sts:AssumeRole"
    }]
  })

  tags = {
    Environment = var.environment
    ManagedBy   = "Terraform"
  }
}

# Anexar políticas à role ECS
resource "aws_iam_role_policy_attachment" "ecs_instance_policy" {
  role       = aws_iam_role.ecs_instance_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
}

resource "aws_iam_role_policy_attachment" "ecs_ecr_policy" {
  role       = aws_iam_role.ecs_instance_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
}

resource "aws_iam_role_policy_attachment" "ecs_cloudwatch_policy" {
  role       = aws_iam_role.ecs_instance_role.name
  policy_arn = "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
}

# Instance Profile para ECS
resource "aws_iam_instance_profile" "ecs_instance_profile" {
  name = "ecs-instance-profile-${var.environment}"
  role = aws_iam_role.ecs_instance_role.name
}